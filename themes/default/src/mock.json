{
  "api": "/documents",
  "searchAPI": "/documents/search",
  "directories": [
    {
      "name": "Javascript 工作原理",
      "cnName": "Javascript 工作原理",
      "locator": "ny150b",
      "category": "Javascript 工作原理",
      "depth": 1,
      "document": {
        "locator": "ny150b",
        "title": "Javascript 工作原理",
        "data": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\"><h2 data-lake-id=\"5150179c19de9a9e78bc208ddb91db8c\" style=\"text-align: justify; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\" id=\"iwmGW\">Javascript 定义</h2><ul data-lake-id=\"0609e56b8e11284965700442e2ba5168\" style=\"text-align: justify; list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\" lake-indent=\"0\"><li data-lake-id=\"ee0a978143f5b40a803aea8c903ef140\">单线程</li><li data-lake-id=\"e164042150c64f1351f447d6b5d1a38c\">异步 IO</li><li data-lake-id=\"039429c9fed28e2779dd6371064c131f\">并发</li><li data-lake-id=\"27c488654763e0b0ab5b730ae60a3eb3\">基于原型的面线对象</li><li data-lake-id=\"fdc3f6fe93b945aa00209a5c6bdee5dd\">脚本语言</li></ul><h2 data-lake-id=\"85b9cab66bfdb084ef9585b7e690e50d\" style=\"text-align: justify; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\" id=\"8lHD3\">Javascript 引擎与运行时环境</h2><p data-lake-id=\"b6a5541c3169e8f16dce6e12395d075f\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Javascript 引擎和运行时环境这两个概念很容易被弄混，但它俩真不是一个东西。Javascript 引擎做的事情是实现 ECMAScript 标准，解释（或编译） Javascript 代码；而运行环境是包括引擎并提供一些类库让 Javascript 代码能够在其上运行，例如 Chrome, Node。</p><h2 data-lake-id=\"448a0f67d72238dee4c10446db147408\" style=\"text-align: justify; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\" id=\"Uc10w\">为什么设计为单线程？</h2><blockquote style=\"text-align: justify; margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"6d799ff4d74236bb05f5f8a5a277bc04\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p data-lake-id=\"1d96e109d21ac130f1054f6e54a94b8e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p data-lake-id=\"30376cc31bf503533c273d5b84a42b09\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p data-lake-id=\"a98955c43bdc8c737ebfe7cec2cf7929\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p><p data-lake-id=\"eb061aa109afda7dbaa77bde4efba847\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">摘自 <a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></p></blockquote><h2 data-lake-id=\"828fd55ab8c81350732cab29d97eab05\" style=\"text-align: justify; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\" id=\"4rukO\">单线程如何异步，如何并发？</h2><p data-lake-id=\"ce871da2c7b19fcee904ee7e1e2e72f2\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们知道，在一段程序代码中发起一个调用并等待直到调用���回结果再执行接下来的代码，这个调用对于这段程序来说是同步的；而发起一个调用后不用等待调用结果而直接执行后面的代码，这个调用对于这段程序来说就是异步的。</p><p data-lake-id=\"fc1d2efd917257b34efbbc1f3392cd4c\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">异步意味着在主逻辑中被异步调用的代码和主逻辑继续执行的代码会同时执行，这其实是实现了并发。回想一下我们在 Java 或者其它多线程语言中是如何实现异步的，一般来说，要创建一个异步任务，我们通常会创建一个线程然后在线程中执行该任务，这个任务和创建它的线程就可以并发执行了。但 Javascript 单线程的特性显然和这异步、并发是有冲突的，那么为什么说 Javascript 支持异步，支持并发呢？</p><p data-lake-id=\"15a01742e2db13fa3c2cffc55b63ab18\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">其实理解起来也很简单，Javascript 本身并不是异步的，而 Javascript 程序是异步的。具体来说就是，Javascript 编写的代码自身运行于单线程中，当遇到 IO 调用，就把它丢给运行时环境处理，自身继续执行后面的代码，当 IO 调用有了结果，会将结果及回调放在一个队列里，Javascript 线程会在合适的时机将回调函数取出并执行。</p><p data-lake-id=\"f9700fd1f6ddf718ff875977a8730120\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Javascript 程序的异步由其运行时环境提供，通过<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">event loop</code>实现异步编程，并提供并发支持。</p><p data-lake-id=\"8b687f124994f29042b58a8093c13c4e\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">实现异步编程可以有很多种方式(<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">编程模型</code>)，想了解更多可以先看看<a href=\"http://www.jianshu.com/p/c4dc7866eb81\" target=\"_blank\">这篇文章</a>。</p><h2 data-lake-id=\"4dee4495657a87e794ccf03afb7acdf4\" style=\"text-align: justify; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\" id=\"2QyHc\">Javascript 具体是如何工作的</h2><p data-lake-id=\"6547095debc16a5001a544a7c4824ccc\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">单说<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Javascript 是如何工作的</code>其实不太准确，应该说<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Javascript 在其运行时环境上是如何工作的</code>才对，Node 和 Chrome 都是 Javascript 的运行时环境，它们使用相同的 JavaScript 引擎(V8)，都应用基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">event loop</code> 的并发模型( Chrome 内核使用了 libevent 而 Node 则基于 libuv )，那么 Javascript 在这样的运行时环境下是如何工作的呢？</p><p data-lake-id=\"ed52012df77075905b4c62fbedfc3c79\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">是时候祭出这张图了</p><p data-lake-id=\"7ce5ab31822a5c7b4953c89e55ac9517\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"text-align: justify; margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"bb7f015cf88cf305809c50842ff2d87e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">此图来自Philip Roberts的演讲<a href=\"http://vimeo.com/96425312\" target=\"_blank\">《Help, I’m stuck in an event-loop》</a></p></blockquote><p data-lake-id=\"d90f2c5e4239aaa5cb84c8d289120ebb\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这张图讲的是 Javascript 在浏览器中的工作原理，在 Node 中也差不多，很具有代表性。</p><p data-lake-id=\"1af8859f184560486c9a5f2a95329845\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong>看图说话</strong></p><ol data-lake-id=\"bc5d4da793749225c8ab6decf93c1bd2\" style=\"text-align: justify; list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\" lake-indent=\"0\"><li data-lake-id=\"d72148643a2947f0f708989931c17100\">V8 在编译执行 Javascript 代码过程中会生成堆( heap ) 和栈 ( stack )，heap 存放的程序运行过程中产生的一些对象，stack 是 Javascript 执行栈，程序代码会根据调用关系被压入栈中执行；</li><li data-lake-id=\"eccd5a35bda955f0e9b9c509e3d6e24e\">当遇到调用 WebAPIs（IO 或者 定时器）时，浏览器会响应调用并直接返回，stack 继续执行剩余 Javascript 代码；</li><li data-lake-id=\"5f551fa512056f0e55f3d0ec6ddba850\">当 WebAPIs 调用完成，会将相应的回调与结果依次放入 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">callback queue</code> 中；</li><li data-lake-id=\"13d1ef412f8f3f3647f5dc8be8295189\">当执行栈中如果没有要执行的 Javascript 代码，则会通过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">event loop</code> 检查并取出 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">callback queue</code> 中第一个回调函数，并执行它。</li></ol><p data-lake-id=\"d5fbe531a9ed0ee6fcb83661951643e3\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这样，我们所编写的 Javascript 代码会在<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">执行引擎</code>的执行栈中以单线程的方式运行，而所有 IO 或定时任务会通过运行环境异步执行，并将执行结果放在 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">callback queue</code> 中等待被调用，这就是所谓的单线程异步的工作原理，当然 Javascript 实际运行环境的实现会比这复杂一些，但基本原理就是这样；理解这个原理能够让我们更加清楚我们的每一段代码在运行环境中是如何执行的，有很多疑惑例如：程序代码中的多个回调会在什么时候被调用？为什么复杂的计算逻辑要使用 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setImmediate(function () { // 计算逻辑 }); 或 process.nextTick(function () { // 计算逻辑 });</code> 包起来？就容易理解了。</p><h2 data-lake-id=\"90f1c0231e5e45b917e4b5c242964d72\" style=\"text-align: justify; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\" id=\"c8UIk\">小结</h2><p data-lake-id=\"2e54ab0d2b496c13cb505d1b3e38dd2e\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">本文主要解释了 Javascript 作为单线程语言，其程序是如何实现异步的，同时也大概讲解了 Javascript 在其运行时环境中的工作原理；在解惑的同时也带来了一些疑惑：</p><ul data-lake-id=\"9f56a7126ce8381b08f2140c33bc400f\" style=\"text-align: justify; list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\" lake-indent=\"0\"><li data-lake-id=\"7e34b456985fcb9c020ac2f40e8aa7a4\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">setImmediate 和 process.nextTick</code> 的区别是什么？</li><li data-lake-id=\"230325e005ff59051dd1a52773d8149d\">既然 Javascript 程序也是通过(运行时环境)底层的多线程实现异步，那跟多线程语言实现的异步有什么不同？</li><li data-lake-id=\"033d98d3f84debabe90cf6c972c85875\">为什么说基于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Event loop</code> 实现异步编程模型的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Node</code> 更适合 IO 密集型的应用，底层不都是多线程吗？</li></ul><p data-lake-id=\"99cb812d6600a8413e229b531fcfa731\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">这些问题也是我在做 Javascript 开发不同阶段中真真实实遇到的疑惑，通过自己一步一步的探索得到了一些解释，希望也能帮到正遇到这些疑惑的朋友们，如有问题，请指出。</p><p data-lake-id=\"276c86e2d289b45ad996ca3bb2226fa5\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">篇幅原因（才怪，因为懒）这些疑惑下一篇再来探讨。</p><h2 data-lake-id=\"8c70d75925884604c0caaf8f04100a5b\" style=\"text-align: justify; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\" id=\"pcBhW\">参考</h2><p data-lake-id=\"04978c6bfa9561eb50b883c5931d47a6\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"http://blog.csdn.net/lin_credible/article/details/40143961\" target=\"_blank\">朴灵评注-JavaScript 运行机制详解：再谈Event Loop</a></p><p data-lake-id=\"ae39f23e6110e70a85378cedcc18e56a\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"http://vimeo.com/96425312\" target=\"_blank\">Help, I’m stuck in an event-loop</a></p><p data-lake-id=\"b2d4039767df3e49836f99ac373df202\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\">并发模型与Event Loop</a></p><p data-lake-id=\"c49370c0a4e9f9f3e1191d1ac7eda6ab\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"http://www.cnblogs.com/dolphinX/p/3475090.html\" target=\"_blank\">关于node.js的误会</a></p><p data-lake-id=\"0b833c09dcf692523287a1e7fdcef6f1\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/goddyZhao/GPosts/blob/master/javascript/%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E9%80%94%E5%BE%84%E8%83%BD%E5%A4%9F%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JavaScript%E8%A7%A3%E6%9E%90%E5%BC%95%E6%93%8E%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F.md\" target=\"_blank\">通过什么途径能够深入了解JavaScript解析引擎是如何工作的？</a></p><p data-lake-id=\"8c868527dcf36185c10ef70d940c3b5e\" style=\"text-align: justify; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://cnodejs.org/topic/4f16442ccae1f4aa2700113b\" target=\"_blank\">nodejs异步IO的实现</a></p></div>",
        "creator": "程科(金禅)"
      }
    }
  ],
  "documents": [
    {
      "id": 7122222,
      "slug": "ny150b",
      "title": "Javascript 工作原理",
      "description": "Javascript 定义单线程异步 IO并发基于原型的面线对象脚本语言Javascript 引擎与运行时环境Javascript 引擎和运行时环境这两个概念很容易被弄混，但它俩真不是一个东西。Javascript 引擎做的事情是实现 ECMAScript 标准，解释（或编译） Javascr...",
      "user_id": 231502,
      "book_id": 1053012,
      "format": "lake",
      "public": 1,
      "status": 1,
      "view_status": 0,
      "read_status": 1,
      "likes_count": 0,
      "comments_count": 0,
      "content_updated_at": "2020-05-16T20:07:00.000Z",
      "created_at": "2020-05-16T20:03:17.000Z",
      "updated_at": "2020-10-15T07:50:15.000Z",
      "published_at": "2020-10-15T07:50:15.000Z",
      "first_published_at": "2020-05-16T20:03:17.000Z",
      "draft_version": 3,
      "last_editor_id": 231502,
      "word_count": 1847,
      "cover": "https://cdn.nlark.com/yuque/0/2019/png/105911/1570527117308-c7131366-f7d1-49de-b874-ddf2384e3937.png",
      "custom_description": null,
      "last_editor": {
        "id": 231502,
        "type": "User",
        "login": "mark.ck",
        "name": "程科(金禅)",
        "description": "{\n  \"github\": \"https://github.com/mark-ck\",\n  \"beian\": \"粤ICP备 16116485 号\"\n}",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/231502/1575430020486-avatar/64bbc238-6ee3-4ae8-aae5-81fad0f4b3f0.png",
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2018-12-25T09:49:25.000Z",
        "updated_at": "2020-05-16T20:03:17.000Z",
        "_serializer": "v2.user"
      },
      "book": null,
      "_serializer": "v2.doc"
    }
  ],
  "userInfo": {
    "id": 123,
    "type": "User",
    "space_id": 0,
    "account_id": 123,
    "login": "mark.ck",
    "name": "程科(金禅)",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/231502/1575430020486-avatar/64bbc238-6ee3-4ae8-aae5-81fad0f4b3f0.png",
    "books_count": 2,
    "public_books_count": 1,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": {
      "github": "https://github.com/mark-ck",
      "beian": "粤ICP备 xxx 号"
    },
    "created_at": "2018-12-25T09:49:25.000Z",
    "updated_at": "2020-05-16T20:03:17.000Z",
    "_serializer": "v2.user_detail"
  },
  "npm": "@ablula/default-blog-theme@0.0.5",
  "namespace": "mark.ck/igyg77",
  "baseUrl": "https://www.yuque.com/api/v2",
  "search": "/documents/search",
  "title": "Ablula 的博客",
  "prefix": "/documents",
  "onlyDoc": false,
  "noHeader": false,
  "showSearch": true,
  "showEditor": false,
  "view": "",
  "token": "<your yuque token>",
  "darkMode": true,
  "blackColor": "#313437",
  "headerHeight": 80,
  "logo": "https://i.ablula.tech/ablula.png",
  "menuStyle": {
    "fontSize": 14
  },
  "logoStyle": {
    "paddingLeft": 20
  },
  "menuDataSource": [
    {
      "label": "文档",
      "target": "_self",
      "url": "/doc"
    },
    {
      "label": "协议",
      "target": "_self",
      "url": "http://lowcode-engine.cn/lowcode"
    },
    {
      "label": "Github",
      "target": "_blank",
      "url": "https://github.com/alibaba/lowcode-engine"
    }
  ]
}