{
	"api": "/documents",
	"searchAPI": "/documents/search",
	"directories": [{
		"name": "关于我",
		"cnName": "关于我",
		"locator": "me",
		"category": "关于我",
		"document": {
			"updated_at": "2022-03-17T17:31:53.000Z",
			"locator": "me",
			"title": "关于我",
			"data": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u68d37bfd\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">我叫程科，花名金禅，目前就职于阿里巴巴，是集团前端委员会中后台物料生态负责人，集团低代码引擎共建小组核心成员。2018 年加入阿里巴巴业务平台事业部体验技术团队，目前专注于前端物料生态、低代码研发领域。</span></p><h1 id=\"VPTqk\"><span class=\"ne-text\">关于本站</span></h1><p id=\"u605fc3ff\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">本站是基于我开发的</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\"> </span><strong><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">YuQueViewer</span></strong><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\"> </span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">搭建的个人博客，博客内容通过语雀编写管理，通过阿里云 FaaS 实时从语雀拉取数据通过</span><a href=\"https://github.com/mark-ck/ablula-document-client\" data-href=\"https://github.com/mark-ck/ablula-document-client\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">ablula-document-client</span></a><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">模板进行展示。</span></p><h1 id=\"TT2qZ\"><span class=\"ne-text\">团队招聘</span></h1><p id=\"u19c32b75\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">我所在的团队是阿里巴巴业务平台事业部-体验技术团队，是一个拥有 100+ 前端工程师的大型前端团队，成长空间极佳。</span><span class=\"ne-text\"><br /></span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">我们主要的产品有：</span></p><ul class=\"ne-ul\"><li id=\"ud9d5c8ec\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">Fusion(中后台设计系统解决方案)</span></li><li id=\"u07728e7e\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">Arms 前端监控系统</span></li></ul><ul start=\"3\" class=\"ne-ul\"><li id=\"u452edba6\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">集团中后台物料中心</span></li><li id=\"u69a0bd2e\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">HpaPaaS 低代码研发平台</span></li></ul><ul start=\"5\" class=\"ne-ul\"><li id=\"ua81df8a8\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">Done 设计研发一体化平台</span></li></ul><p id=\"u93bf96e9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">团队长期招募，感兴趣的同学</span><a href=\"mailto:mark.ck@alibaba-inc.com\" data-href=\"mailto:mark.ck@alibaba-inc.com\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">欢迎与我联系</span></a><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">。</span></p></div>",
			"creator": "程科(金禅)",
			"word_count": 289,
			"hits": 11
		}
	}, {
		"name": "前端物料在低代码研发模式下的探索",
		"cnName": "前端物料在低代码研发模式下的探索",
		"locator": "kk06ev",
		"category": "前端物料在低代码研发模式下的探索",
		"document": {
			"updated_at": "2022-03-17T17:31:10.000Z",
			"locator": "kk06ev",
			"title": "前端物料在低代码研发模式下的探索",
			"data": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B76%2C0%2C75%5D%2C%5B76%2C0%2C75%5D%5D%2C%22active%22%3Atrue%7D\"><h1 data-lake-id=\"d68d17c2de22ba852f395a280e60d51f\" id=\"Azlpb\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 28px; line-height: 36px;\"><span>前言</span></h1><p data-lake-id=\"5f9173e9d710c70fc2db346e3f0a4afa\" id=\"uca54d36f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>“Low-Code</span><span>(低代码)</span><span>” 最早是由 Forrester 提出的，在近几年又赢来了一轮爆发，2021 钉钉 6.0 发布会推出了“</span><a href=\"https://www.aliwork.com/\" target=\"_blank\"><span>宜搭 YIDA</span></a><span>”，2020 年底腾讯云推出了“</span><a href=\"https://cloud.tencent.com/product/weda\" target=\"_blank\"><span>微搭低代码 WeDa</span></a><span>”，2019 年百度开源了低代码研发框架 “</span><a href=\"https://github.com/baidu/amis\" target=\"_blank\"><span>AMIS</span></a><span>”；低代码研发平台的融资消息越来越多，</span><a href=\"https://www.163.com/dy/article/G5842SQB05118ARK.html\" target=\"_blank\"><span>仅是 2021 年 3 月就有 5 起千万级融资</span></a><span>。</span></p><h2 data-lake-id=\"a1a985ceb4446ae4a74a2b3cc48f6703\" id=\"z67lv\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>低代码的本质是什么</span></h2><p data-lake-id=\"eed90b7a38a340e82f0378b3eb7196e3\" id=\"u86cbe907\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>我们知道技术的本质是将 idea 落地，技术面向的用户一般是开发者，而低代码或者零代码其实也是一种技术手段，但低代码面向的用户则不一定是开发者，它的目标用户是</span><strong><span>想要实现 idea 的任何人</span></strong><span>，低代码是实现</span><span class=\"lake-fontsize-12\" data-mce-style=\"font-size: 12px\" style=\"font-size: 16px;\">&nbsp;</span><strong><span>Citizen Developer(全民开发者) </span></strong><span>的关键。低代码通过抽象和交互升级隐藏了很多技术细节，抹平了开发者和非开发者的知识差异，让非开发者也能亲手实现自己的 idea，这就是赋能，因此低代码的本质其实是</span><strong><span>跨专业能力的赋能</span></strong><span>。</span></p><h2 data-lake-id=\"8111e372b2fa3d0fe041c7f869a1abf2\" id=\"eUvAB\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>为什么低代码再次兴起</span></h2><p data-lake-id=\"f8b87af3f126fc24436ba4e0bdc645c1\" id=\"u6b24107d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>低代码领域的巨头 OutSystems，早在2001年就已经创立，Mendix 创立于 2005 年，那么为什么低代码之前没火起来，最近才越来越火了呢？我认为有两方面的原因：</span></p><h3 data-lake-id=\"bf09d26344a6eafef4149c4b8406a02a\" id=\"Jbk0W\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>需求井喷</span></h3><p data-lake-id=\"548be0eb320d0d130d66c0cef6d95f1f\" id=\"u897e84dd\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>互联网发展到现阶段，C 端人口红利逐渐消失，野蛮生长的时代已经过去，企业必须精细化运营才能保持增长，同时越来越多的传统企业在向互联网转型，这些都带来了井喷的中后台业务需求。而中后台业务相对于前台业务有一个特点，中后台业务的 UI 更加模式化，更适合通过低代码搭建的方式来生产。低代码越来越被需要了，这是低代码再次兴起的原因之一。</span></p><h3 data-lake-id=\"cf713dea690df151f658ff50022a407f\" id=\"AuZkX\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>基础技术趋于成熟</span></h3><p data-lake-id=\"a926f96414cc296d60fdd06ad15e3e2b\" id=\"u8fd5df99\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>任何技术都有其成长周期，低代码研发平台所需的核心技术也经过了漫长的发展趋于成熟，特别是对于前端来讲，我认为</span><strong><span>前端</span></strong><strong><span>组件的出现和基于组件的研发链路的广泛应用为低代码的兴起提供了最底层的保障</span></strong><span>。</span></p><p data-lake-id=\"fbb38caae29bf91c16b2e47b9763815a\" id=\"u8931ae04\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>前面提到低代码的本质是赋能，抹平非开发者的知识差异；我们可以试想一下，在前端组件出现之前，要实现一个页面，开发者需要编写 HTML、CSS 代码，这个效率是很低下的(这也是前端组件出现的原因)，如果此时有一个低代码研发平台，非开发者要拖拽 HTML 标签、配置 css 来搭建一个页面，这个效率可想而知，这样的低代码研发平台也达不到赋能的目的。而前端组件的出现则大大缓解了这个问题，前端组件并不是一个纯技术的概念，而是从 web 应用的视角被设计出来的一系列可复用单元，非开发者也能够很容易理解组件这个概念，</span><strong><span>因此组件的出现和广泛应用为低代码能够真正实现赋能提供了保障</span></strong><span>。</span></p><h1 data-lake-id=\"a0ce690ef2480de35dd2bc8c75dd753c\" id=\"tCVO3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 28px; line-height: 36px;\"><span>我们围绕前端物料的积累</span></h1><h2 data-lake-id=\"3d130150f82b2c41c45df808b33cb3ae\" id=\"IVEP8\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>从前端组件到前端物料</span></h2><p data-lake-id=\"f7019ef2fae4ebc9a08cdd8c1533349f\" id=\"u4e6117b3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618160454595-8e12236f-aa98-42f0-8d0e-c831e8d7637c.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"338px\" style=\"visibility: visible; width: 600px;\"></span></p><p data-lake-id=\"540b2f70966006789f801652c5245a19\" id=\"ucdfb056e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>前端组件的出现大大的提高了前端开发效率，在实际业务中，我们根据组件的复用粒度和使用方式对组件及其衍生物进行了更细的划分：</span></p><p data-lake-id=\"6b391d689bace2f1709ca0bc27569e6e\" id=\"u8e6e2d11\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>• </span><span>基础组件（</span><span>Basic Components</span><span>）：前端领域通用的基础组件，阿里经济体前端委员会官方指定的基础组件库是</span><span>Fusion Next/AntD；</span></p><p data-lake-id=\"84fee16e58dc5f1c5550618665b6bc0f\" id=\"u233688e9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>• </span><span>图表组件（</span><span>Chart Components</span><span>）：前端领域通用的图表组件，有代表性的图表组件库有</span><span>BizCharts</span><span>；</span></p><p data-lake-id=\"5e1d44d800a13379ff10ddf201436577\" id=\"u64f65e3b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>• </span><span>业务组件（</span><span>Business Components</span><span>）：业务领域内基于基础组件之上定义的组件，可能会包含特定业务域的交互或者是业务数据，对外仅暴露可配置的属性，且必须发布到公域如阿里</span><span>NPM</span><span>；在同一个业务域内可以流通，但不需要确保可以跨业务域复用</span><span>；</span></p><p data-lake-id=\"d668cda430785cdf49bab3887ea6150e\" id=\"uc301a6e9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>• </span><span>布局组件（</span><span>Layout Components</span><span>）：前端领域通用的用于实现基础组件、图表组件、业务组件之间各类布局关系的���件，如三栏布局组件</span><span>；</span></p><p data-lake-id=\"63c04f17fac2da77643397d3280e9c2a\" id=\"uade59bc7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>• </span><span>区块（</span><span>Block</span><span>）：一系列业务组件、布局组件等组合而成的代码片段，不对外提供可配置的属性；区块内部具备完整的内部样式、事件、生命周期管理、状态管理、数据流转机制，能独立存在和运行，通过代码片段的复制实现跨页面、跨应用的快速复用，保障功能和数据的正常</span><span>；</span></p><p data-lake-id=\"40f891562fa540c0c42771e3b1148165\" id=\"u4b3b7547\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>• </span><span>模板（</span><span>Template</span><span>）：特定垂直业务领域内的业务组件、区块可组合为单个页面，或者是再配合路由组合为多个页面集，统称为模板</span><span>；</span></p><p data-lake-id=\"43205e8eb3e1a8047557431a7b13a072\" id=\"uf9b7e49b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>上述可复用单元统称</span><strong><span>前端物料</span></strong><span>。</span></p><h2 data-lake-id=\"27b68a8ff7f19881a60a3119347d95fd\" id=\"Eowcj\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>前端物料的演进</span></h2><h3 data-lake-id=\"b83ee71758348a72f61e335c999ad2dc\" id=\"LIXlK\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>物料开发优先？</span></h3><p data-lake-id=\"4b6f24d2700bcb2bf37431ec1e31fc3e\" id=\"u7c80720d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>前端物料是构成前端项目(页面)的可复用单元，那么在一个前端项目的迭代周期中，我们期望的是前端同学拿到了设计稿首先就先能分辨页面的哪些部分可以用现有物料来做，哪些部分要新开发物料，所以在页面开发前先开发缺的物料，或者物料开发和组件开发由不同的人同时进行。</span></p><p data-lake-id=\"ad5c30e3682dfb52cb26712a140b0e48\" id=\"ua5a9d21b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>然而实际情况是怎么样呢？分析设计稿中哪些���分可以用现有物料来实现这部分是必要的，对于新物料的开发在很多情况下都会被忽略掉而直接进行页面的开发；前面说过，前端物料是可复用单元，但是对于一个新项目或者单个页面来说，要将页面中</span><strong><span>可能会复用的部分</span></strong><span>抽象成一个独立的物料再引入页面开发，整个流程是被拉长了的，效率反而会降低，特别是对于一些人力不足的紧急项目(在阿里很常见)来说，</span><strong><span>物料开发先于页面开发的效益是不高的</span></strong><span>。</span></p><p data-lake-id=\"fd35c717d767137e89dd6db7902529a0\" id=\"u28bb9fab\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>物料开发优先除了会降低单个页面的开发效率还可能会出现新开发的物料无法在其他地方复用，因为开发者直接从设计稿抽象出新物料是未被验证可复用的，这样的话不仅降低了单个页面的开发效率，对于项目整体的研发效率也没有提高。</span></p><p data-lake-id=\"45e6f53145a819fde1d64f11807b35a6\" id=\"ucb91b644\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"5db820333fc08e3722d2d7c6e5f6bedb\" id=\"u498340f8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>那么是不是一定不能物料开发优先呢？其实也不是，如果你对自己的抽象能力非常有把握，能确定新物料能够在项目中被复用，并且项目有足够的人力保障，那物料开发优先可以很好的提效，但是对于大多数情况来讲，物料渐进式演进是更好的选择。</span></p><h3 data-lake-id=\"ab3fc30afca067c15d6bf4146dbeeed4\" id=\"x3a7W\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>物料渐进式演进</span></h3><p data-lake-id=\"58f42e2af16271171fec5787f7092abd\" id=\"u13ab38e1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>我们在写代码的时候，遇到重复的逻辑会将其抽象成一个方法在不同的地方调用；对于前端物料也是同样的，我们可以在遇到重复界面的时候先在项目中对其进行抽象得到一个项目内可复用的模块，当遇到这个模块需要跨项目复用的时候我们再将它独立出来成为一个</span><strong><span>前端物料</span></strong><span>，这就是物料渐进式演进的过程。</span></p><h2 data-lake-id=\"85556c8281879081ed93f9383bc3b426\" id=\"sd5LA\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>基于前端物料的研发链路提效</span></h2><h3 data-lake-id=\"93fd4a4c8a72ef61dc2ae1eda0f6bba5\" id=\"Zzwso\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>研发链路分析</span></h3><p data-lake-id=\"2056028e36dcea9a28cf9cdb181ac243\" id=\"u6a3f2eb3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>在一个前端项目迭代周期中跟物料相关的部分，除了物料的沉淀，物料的挑选和消费会占更大的比重，那么要如何对整体研发链路进行提效呢？我们先来分析一下整个过程中有哪些环节：</span></p><p data-lake-id=\"1cc86bf1288de8ab1f46d376951e75ff\" id=\"u6ae3eae0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618160471627-63a1f217-cf11-4267-84e2-1bd55c302cb1.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"574px\" style=\"visibility: visible; width: 600px;\"></span></p><p data-lake-id=\"70e0276bfde157baa4792ce6ec130b44\" id=\"ubd7bc3bc\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如上图所示，开发者最多会经历</span><strong><span>基础物料-</span></strong><strong><span>&gt;</span></strong><strong><span>团队物料-</span></strong><strong><span>&gt;</span></strong><strong><span>物料中心-</span></strong><strong><span>&gt;</span></strong><strong><span>搜索引擎-</span></strong><strong><span>&gt;</span></strong><strong><span>物料开发-</span></strong><strong><span>&gt;</span></strong><strong><span>物料沉淀-</span></strong><strong><span>&gt;</span></strong><strong><span>物料消费</span></strong><span>这些环节，除了搜索引擎不可控，其他环节的提效都可以算是研发链路的整体提效。</span></p><p data-lake-id=\"9a038a29f822429ed2b67c8520a67c83\" id=\"u0dba2cb4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span>基础物料</span></strong></p><p data-lake-id=\"78401e49b58a4a3b8889f42a444b90c8\" id=\"u7c99f36b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>开发者第一步就会去看看基础组件里是否有合适的，如果有的话就直接消费了，所以</span><strong><span>基础物料</span></strong><span>的丰富度、文档和品质非常重要；</span></p><p data-lake-id=\"83c05d40b1b5e5e213102623defd0896\" id=\"u780bb562\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span>团队物料</span></strong></p><p data-lake-id=\"46fb26a8233e24473b18906d5ffe5134\" id=\"u187af7ca\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如果没有合适的基础组件，开发者会去看看团队内是否沉淀过匹配的物料，这个过程就因团队而异了，有些团队没有公共的地方沉淀物料，他们只能去团队群里问问；大一点的团队把内部沉淀的物料记录在一个语雀文档里，方便团队内部复用；再大一点的团队可能会建设自己的物料站点，将物料都放在线上站点，这样团队内部的同学可以更快地判别是否有合适的物料，也能更方便的查看物料文档，但是物料站点的搭建和维护都有不小的成本；因此</span><strong><span>物料站点</span></strong><span>也是一个可以提效的点；</span></p><p data-lake-id=\"8a89f01ca23235b92bf7b2b325af7f7f\" id=\"ua54a0100\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span>物料中心</span></strong></p><p data-lake-id=\"2808b89d7cd6ec93ac3e90b0db07cc13\" id=\"u383609e4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如果团队内部也没有合适的物料，开发者可以去物料中心看看，别的团队有没有沉淀类似的物料，用户从打开物料中心到找到合适的物料这个过程，都是物料中心要优化提效的点；</span></p><p data-lake-id=\"0e406c8a4c9aa09107615963db89fe99\" id=\"ud45547e8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span>物料开发</span></strong></p><p data-lake-id=\"3f7ea8f967c02989109a1a1f57ae4d92\" id=\"u318de29c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>如果上述过程都没有找到合适的物料，那么开发者需要自行开发一个物料出来，帮助用户快速开发物料也是一个提效的点；</span></p><p data-lake-id=\"9caa0484aba981947c75fa194305551f\" id=\"u93a65457\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span>物料沉淀</span></strong></p><p data-lake-id=\"1011beb4cd8bf794e522cc417c43c38f\" id=\"u88b5c873\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>开发好了物料，为了方便下次复用，需要沉淀下来，帮助用户沉淀物料也是对研发链路的提效；</span></p><p data-lake-id=\"47f20f0edfab631d07626605ea097caa\" id=\"u7a390b1e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><span>物料消费</span></strong></p><p data-lake-id=\"7751d9e93283a335d525d48750ab26dd\" id=\"u55350901\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>物料消费也是可以提效的，例如我们把物料的 API 和 Demo 写的更加丰富、易懂，可以方便开发者更快上手，这也是对整体研发链路的提效；</span></p><h3 data-lake-id=\"5329e509bdbba6a365461d0a0a374a4b\" id=\"fCF2S\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>提效方案</span></h3><h4 data-lake-id=\"27fab4b4e14e32e6bec4cba736b5718f\" id=\"05Jlw\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>丰富官方物料</span></h4><p data-lake-id=\"3f604bc016f0b22b33f2679f7452f885\" id=\"ub5a3b6c4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>开发者在实现一个页面时第一个想到的就是官方物料，官方物料是由专人维护的通用精品物料，可以给业务开发提供质量保障，所以官方物料要在保证质量的前提下尽可能的覆盖更多的场景。</span></p><h4 data-lake-id=\"16296d4304b46cf8b2b745737c8bce79\" id=\"1P0ri\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>帮助业务自建物料体系</span></h4><p data-lake-id=\"a56b3a671ccdfe5216f646ead7cadba1\" id=\"u37aa3465\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>官方物料再全也不可能覆盖所有场景，一定会有业务物料被开发出来，那么业务就会存在对业务物料的生产、管理、共享、消费整套体系建设的诉求，因此我们提供了一系列的工具和平台能力，帮助用户快速地自建自身的物料体系：</span></p><h5 data-lake-id=\"d6539b7f77fa7af9664a44e3c7aae427\" id=\"5kIQX\" style=\"text-align: left; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 14px; line-height: 24px;\"><strong><span>物料生产与&nbsp;demo&nbsp;托管</span></strong></h5><ol data-lake-id=\"1f0a3e770708223249497652633c3808\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"8031b09c5f0cca01a32dcf9f91759c84\"><span>以&nbsp;build-scripts&nbsp;为底座，通过&nbsp;</span><span style=\"background-color: #F7F7F7;\">iceworks&nbsp;add&nbsp;component</span><span>&nbsp;会自动生成符合物料规范的组件代码目录结构，通过&nbsp;</span><span style=\"background-color: #F7F7F7;\">tnpm&nbsp;start</span><span>&nbsp;可在本地启动服务调试组件代码和&nbsp;demo/xx.md&nbsp;中的组件&nbsp;demo；这背后起作用的其实是&nbsp;</span><span style=\"background-color: #F7F7F7;\">build-plugin-components</span><span>&nbsp;这个插件，该插件除了启动本地调试服务外还能够将&nbsp;demo&nbsp;目录下的&nbsp;md&nbsp;文件以及&nbsp;README.md&nbsp;中的组件&nbsp;API&nbsp;说明聚合打包成一个完整的&nbsp;HTML&nbsp;页面到&nbsp;build/index.html；</span></li><li data-lake-id=\"cad0afe1fdfb977b40530d90726be117\"><span>再通过&nbsp;</span><span style=\"background-color: #F7F7F7;\">tnpm&nbsp;publish</span><span>&nbsp;将组件编译后的文件包含&nbsp;build&nbsp;目录总的&nbsp;demo&nbsp;发布成&nbsp;tnpm&nbsp;包，当组件被同步到物料中心时，物料中心会自动获取&nbsp;tnpm&nbsp;中的&nbsp;demo&nbsp;进行托管并提供&nbsp;demo&nbsp;预览功能；</span></li></ol><h5 data-lake-id=\"7be8c03c2ce67d878d7ee1d11b0c13f4\" id=\"OaWGG\" style=\"text-align: left; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 14px; line-height: 24px;\"><strong><span>物料管理</span></strong></h5><ol data-lake-id=\"27e745cc52d3d5b6c6d255d5e36561e2\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"9eb04933c60783dda8fa341efb7c5c24\"><span>用户开发好物料后可通过执行&nbsp;</span><span style=\"background-color: #F7F7F7;\">iceworks&nbsp;sync</span><span>&nbsp;(也可以使用物料中心&nbsp;OpenAPI&nbsp;或&nbsp;sdk&nbsp;自行同步)将物料同步到物料中心的指定站点，用户可在一个站点下管理业务沉淀的多个物料，还可以在物料中心挑选物料添加到自己的站点；</span></li><li data-lake-id=\"598de8759db31e1af3b599162eeede6f\"><span>物料站点提供物料版本管理、物料&nbsp;demo&nbsp;预览、物料&nbsp;demo&nbsp;在线切换主题等能力；</span></li></ol><p data-lake-id=\"55e639d2610232618099ac1478455fbe\" id=\"u89db7220\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618160961696-b1dedb15-7b4d-4459-b6ed-f28adc02afc0.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"367px\" style=\"visibility: visible; width: 600px;\"></span></p><h5 data-lake-id=\"165db008748bc79f3509efa05bc1ea46\" id=\"pN60u\" style=\"text-align: left; padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 14px; line-height: 24px;\"><strong><span>物料消费</span></strong></h5><p data-lake-id=\"5586374486d5c4393a193c578fcfc2d8\" id=\"u3610edf6\" style=\"text-align: left; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>物料站点还提供</span><strong><span>物料源</span></strong><span>接口，用户可通过这个接口获取站点下所有物料进行消费(iceworks&nbsp;客户端可集成物料源接口可视化地展示用户站点的物料)；</span></p><p data-lake-id=\"82f33d38954c879e80c8e777b4468628\" id=\"u95ac3ad0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618160967585-b1b1eb0b-54a7-461c-9916-d5dff0196cc4.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"492px\" style=\"visibility: visible; width: 600px;\"></span></p><h1 data-lake-id=\"e9d0ee6c6e60374def07c5d1b84df2b9\" id=\"cg9xe\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 28px; line-height: 36px;\"><span>前端物料低代码化演进</span></h1><h2 data-lake-id=\"f45d0ec832891d2ff4b7ca0033ceb3eb\" id=\"VJ0gu\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>低代码引擎原理</span></h2><p data-lake-id=\"1748e6a176e385ff065b08f764b211b9\" id=\"u88989e8a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/gif/231502/1618161007065-d514e902-122c-4573-acbb-908f8271483d.gif\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"2.gif\" title=\"2.gif\" data-height=\"338px\" style=\"visibility: visible; width: 600px;\"></span></p><h3 data-lake-id=\"41e7ab31c9eb6981ef1a748bfcf6d902\" id=\"Nm0d7\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>协议</span></h3><ul data-lake-id=\"ed703394eb914067ec290c3e0f0a3d73\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"c699e56c1a228a49672844a3ddd84500\"><span>《中后台搭建协议》</span></li><li data-lake-id=\"b49e356106b3b44bea4ef4782454de6c\"><span>《中后台组件描述协议》</span></li></ul><h3 data-lake-id=\"ed244f451731203abd414c553f613f9b\" id=\"4pJ3j\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>核心模块</span></h3><ul data-lake-id=\"90645a7c9332356d66c0f2e1d9a66672\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"a866c98e10d59b42d7979fac4cddbb04\"><span>渲染模块——所见即所得；</span></li><li data-lake-id=\"65db160375278c74d2849d1af7de9a51\"><span>编排模块；</span></li></ul><ul data-lake-id=\"a34b4856473e47e908194db629d53fb0\" lake-indent=\"1\" style=\"list-style-type: none; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><ul data-lake-id=\"018fafa81390d22613791bfae6b557df\" lake-indent=\"0\" style=\"list-style-type: circle; margin: 0px; padding-left: 23px;\"><li data-lake-id=\"3b54d22429e9d84d855c1cc32e1899d9\"><span>设计器——拖拽搭建；</span></li><li data-lake-id=\"149fc6d414264c2d55f5be231913880e\"><span>配置面板——组件属性配置；</span></li></ul></ul><ul data-lake-id=\"d85e40121cc823f61aae408493b13b65\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"11c7037f53bdb4f0403210904512cc83\"><span>入料模块——组件接入；</span></li><li data-lake-id=\"e6246f8ee49f9b22c5dacce9090fcea2\"><span>出码模块——搭建产物转代码；</span></li></ul><h2 data-lake-id=\"4ab653b9480983de523a599570b56e84\" id=\"JZRzZ\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>前端物料如何被引擎消费</span></h2><p data-lake-id=\"96c5dde84904b524bbc99e5282118a40\" id=\"ua84688c6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618161034757-f35aad0b-1afe-4684-a398-15c155d4d59d.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"338px\" style=\"visibility: visible; width: 600px;\"></span></p><p data-lake-id=\"94389adc656c27af8741cd4505640a0f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">一个源码组件要在低代码引擎中使用需要满足三个条件：</p><ol data-lake-id=\"9393ba6c79fde758053b54216200b620\" start=\"1\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"8786c42a09831cf4b8152d28ba0bc416\">组件的 umd 格式资源；</li><li data-lake-id=\"0db44ef3208080df610ae67368df7f8c\">组件的默认搭建协议 schema，下文简称 snippet；</li><li data-lake-id=\"3ded30168aae95cf4cc938e6c63d8b4e\">组件的低代码描述协议 schema，下文简称 configure；</li></ol><p data-lake-id=\"2c53b8bb9e1d491bb68c7d9b0f370b47\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">组件的 umd 资源和默认的搭建 schema 是为了让组件能够在引擎中在线的渲染出来；</p><p data-lake-id=\"48f7e8c9e124b4624ba92f8ae2fd72db\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">低代码描述协议则是为了让引擎识别出组件的 props 以及每个 prop 对应的配置面板描述，当用户选中组件时可以展示出组件的配置项，以及不同配置项对应的配置面板。</p><p data-lake-id=\"d91c2e7f504cae8069b116cf0e2346f5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">从上图可以看到，组件并非单个独立被低代码引擎消费的，而是以集合的形式被低代码引擎消费，因此我们制定了《中后台物料资产包协议》对组件集合的描述进行规范。</p><h2 data-lake-id=\"2cfa40ddbba414d55f42a25169021289\" id=\"u7pWb\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>前端物料低代码化演进</span></h2><p data-lake-id=\"a5e857508ae2a0b23c8642709581fcd2\" id=\"u0b1146ea\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618161044528-c8fe707e-7793-428c-a81c-3cf37b5564f0.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"336px\" style=\"visibility: visible; width: 600px;\"></span></p><ol data-lake-id=\"5b77afbe09ac3a22591f60fc039e5541\" start=\"1\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"7141da763d296824c4c48d207413532b\">对于准备探索低代码的业务来说，我们要提供一套开箱即用的<strong>低代码基础组件库</strong>，用户可以通过这套组件库来属性低代码研发模式，熟悉低代码物料的编写，快速判断自身业务是否适合使用低代码；</li><li data-lake-id=\"d64385f991f6a5c4b462732e941d66c3\">对于已经准备使用低代码的业务来说，我们要提供一种方式，让业务尽可能低门槛地实现物料低代码化，因此我们在开发源码物料的脚手架体系下提供了一个插件，支持一键开启物料低代码化；</li><li data-lake-id=\"68bb3eb653ae8cee1520d73ae652feca\">对于物料中心上的存量源码组件来说，物料中心提供在线的方式让源码物料低代码化，并且提供可视化编辑器来配置物料的可配置属性。</li></ol><h2 data-lake-id=\"4b616d3311b214d686e00399978876c1\" id=\"9f1DP\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>入料模块实现原理</span></h2><p data-lake-id=\"f935473f63de35a602457e6f6fc5db74\" id=\"ue845185c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618161051316-1377ef75-9e62-467e-bc07-8c6a1e3fd2b3.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"336px\" style=\"visibility: visible; width: 600px;\"></span></p><p data-lake-id=\"03f8693f40114405373f414eb7def3ae\" id=\"u5b1f9e67\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>入料模块是前端物料低代码化的关键，前面提到源码物料+组件描述协议协议 schema 就能够被低代码引擎消费，入料模块就是解析源码组件来</span><span>自动</span><span>生成组件描述协议 schema 的。为了尽可能提高解析成功率的同时兼顾解析效率，入料模块提供了两步解析：静态解析和动态解析，静态解析不成功才进行动态解析。</span></p><h3 data-lake-id=\"5932ea1f4a209589e3345ea631701d22\" id=\"6NfmA\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>静态解析</span></h3><p data-lake-id=\"4c8d41ffad9b5f218dca4a32c155828e\" id=\"u6346fd97\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>静态解析就是通过 npm 包从组件的入口文件开始直接解析文件得到 AST，然后通过 AST 找到组件代码中对应的 props 列表及其默认值；这种解析方式效率会比较高，但是成功率不高，因为不同的组件的编码方式差异较大，特别是复杂组件要直接通过编译后的代码</span><span>正确地解析出组件的 props 比较困难。</span></p><h3 data-lake-id=\"7ce060a9122f66e7b64839af8e100f29\" id=\"Cj7Lx\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>动态解析</span></h3><p data-lake-id=\"74a1076cdefb91885a1b9f3c7a20a6ab\" id=\"u04162197\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>动态解析相对于静态解析成功率会搞一些，它的原理是直接提供一个沙箱环境将组件完整的加载进来，获取到自己的实例后通过组件的属性来得到组件的 props 信息。</span></p><h2 data-lake-id=\"f366cb93a146cc4ba8aa0081918e3a62\" id=\"HJzaC\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>低代码资产管理解决方案</span></h2><p data-lake-id=\"cf4109bb4cc050d0d98e2f0c25b7b782\" id=\"u7726602b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>低代码资产管理解决方案是「基于物料的研发提效方案</span><span>」的延伸，在其基础上根据低代码研发链路的特点提供了能力升级，整个方案是渐进式演进的。</span></p><h3 data-lake-id=\"2ef3019e6fcbb1aa57d6510b87a57ad9\" id=\"g3rej\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>源码组件低代码化</span></h3><h6 data-lake-id=\"66f55049bb63c68d85f53fe77c7f57df\" id=\"uVV7R\" style=\"padding: 7px 0px; margin: 0px; font-weight: 400; font-size: 14px; line-height: 24px;\"><span>组件开发环节低代码化调试</span></h6><p data-lake-id=\"c3be87a01525d76c09f4fb77528f3f5b\" id=\"ud0a7efab\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>提供 </span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>build-plugin-lowcode</span></code><span> 插件：</span></p><ol data-lake-id=\"465b3ac3a0427dde3e0fd7b8388acb65\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"ff18f4679cff80fa83a41ad695f857af\"><span>结合</span><strong><span>入料模块</span></strong><span>实现组件代码解析自动生成初始化 </span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>material-meta.json</span></code><span> 文件；</span></li><li data-lake-id=\"98913536e826494f8ff9957667c3b295\"><span>集成低代码引擎提供极简搭建平台实现 </span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>material-meta.json</span></code><span> 本地调试功能；</span></li><li data-lake-id=\"d73f3281fcf6a02f6bf71203b911a3db\"><span>打包组件低代码 demo 成一个完整的 HTML 到 build/lowcode/index.html 发布到 tnpm 上，物料中心可自动同步物料的 LowCode demo 提供在线预览服务；</span></li></ol><h3 data-lake-id=\"4040b740f23ad7872da38871f996ccf4\" id=\"zaUXH\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>在线低代码化配置</span></h3><ol data-lake-id=\"a9f114e4254d68ad6abcb9a3edb745ac\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"b644a321cd763d9fde497f09dc4ebdbb\"><span>物料中心提供接口可在线解析组件 npm 包自动生成初始化 </span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>material-meta.json</span></code><span> 文件；</span></li><li data-lake-id=\"dbc6aade0956e2a98e113bcd0c2c3090\"><span>物料站点提供 </span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span>material-meta.json</span></code><span> 在线编辑能力；</span></li></ol><h3 data-lake-id=\"dbe5b7f233d95965a703c02d93b2589b\" id=\"e61094ec\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><span>物料资产包管理与交付</span></h3><h4 data-lake-id=\"919cc0742dca8a973293a5c75db1cab2\" id=\"QXZ2v\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>物料资产包 umd 资源构建</span></h4><ol data-lake-id=\"c83646660dd684cc29e6456155797c94\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"da4da8a0ded361fbefee6f23b7c689f0\"><span>将资产包中所有业务组件构建成一个大 umd 资源，减少资产包中资源数量；</span></li><li data-lake-id=\"a0358591404e799293db1e1dfbe4508a\"><span>可选择 fusion 主题参与构建；</span></li><li data-lake-id=\"be4962f774c402ebf907c812d1151e44\"><span>将资产包中的所有物料的 material-meta.json 聚合成完整的资产包数据结构；</span></li></ol><h4 data-lake-id=\"6f166e9978c88aabf3b51e54a0f7c919\" id=\"VKFrV\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\"><span>物料资产包交付</span></h4><ol data-lake-id=\"169909d262e7abfee9a3b60304203d43\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"bed1a321bb70c08cddb03ada84cf96c1\"><span>将资产包发布到 tnpm，通过 tnpm 来实现版本管理，低代码引擎可以引用物料资产包的 tnpm 包来设置资产；</span></li><li data-lake-id=\"dc4e0a6431247c6562a80a462690bf44\"><span>将资产包发布到 cdn，低代码引擎可以直接引用资产包 cdn 地址来设置资产；</span></li></ol><h1 data-lake-id=\"c4ce983a3099f6575d3b567494f92582\" id=\"f1r40\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 28px; line-height: 36px;\"><span>搭建布局体系</span></h1><p data-lake-id=\"4b0e0c8f9b89b58ab96ff76395c85e4e\" id=\"uc4b5c3f3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>当引擎准备好了，物料也低代码化了，那么我们的低代码研发平台就能够实现跨专业能力的赋能了吗？其实我们还缺一个东西，那就是搭建布局体系。搭建布局分为绝对布局和相对布局，绝对布局就是组件在设计器上拖到哪里就是哪里，而相对布局则是根据组件拖动的位置相对于父容器或者兄弟组件的位置进行排布，然后通过调整样式来实现布局。</span></p><p data-lake-id=\"187206b268d1b6c4b41604ea045deaa9\" id=\"ua354138b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>绝对布局对于非设计师来说，很难将一个页面中组件的大小，组件之间的间距控制好，最后搭建出来的页面会不太好看，如果绝对布局提供了标尺和自动吸附能力这个问题可能会有所缓解，但对于非设计师来说要搭建出一个好看的页面难度还是很大，并且由于绝对布局没有父子关系，类似切换 tab 展示不同内容这样的功能就没办法实现了；这是使用绝对布局会出现的问题，而直接相对布局问题会更大些，相对布局要求搭建者写 css 样式，这个学习成本会很高也就很难实现赋能了。</span></p><p data-lake-id=\"dd320ab2112d2569b8f4a309b49636c8\" id=\"udee3ba52\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>直接使用绝对布局或者相对布局都有些问题，因此我们需要实现一套不需要写 css 样式，也不需要有设计相关的知识就能够搭建出“默认好看”的页面的布局体系。</span></p><h2 data-lake-id=\"7ed25593808ce2d00d36e272fe780b80\" id=\"1HPMN\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><span>搭建体校利器——自然布局</span></h2><p data-lake-id=\"f9e5458f956a30736c1981b77cd2b3b5\" id=\"uac3ee535\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>自然布局的理念是提供“</span><strong><span>文档排版式的搭建体验</span></strong><span>”，对于搭建的用户来说，因为职能上的知识差异会对搭建布局体系有不一样的要求；但是对于文档排版来说，不同用户之间的差异就很小了，不管是产品经理、设计师还是研发同学，我们写的文档不会说谁的排版比谁的好看很多，我们使用语雀写出来的文档默认就是“好看”的，那么搭建是否也能提供类似的方案呢？自然布局就是希望提供这样的搭建体验。</span></p><p data-lake-id=\"80e9ce68c11661805fb846795c22182c\" id=\"u6fa46d8e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618161065975-5bb7ff48-0a3e-47e0-98a8-641f65646353.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"338px\" style=\"visibility: visible; width: 600px;\"></span></p><ol data-lake-id=\"49b1d2e046f3f380f4fa01b29f60317d\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"a64e14b7b5d197e15ed7f7c83738f1bc\"><span>自然布局抽象出了常用的页面布局方式，可以直接通过配置的方式选择不同的布局方式；</span></li><li data-lake-id=\"2cb659eba3b6eec48930b0086ede3374\"><span>自然布局通过给拖入组件自动包裹段落，段落间的间距由主题来控制这样就保证了整个页面段落的排布不会显得杂乱；</span></li><li data-lake-id=\"6efb20029614efd4997922dd75888c3b\"><span>段落内组件的间距由字号或者组件高度动态调整，</span><span>并且段落还提供了常见的段落内容排版方式；</span></li><li data-lake-id=\"14758ec1f884ea316653968b0fa19375\"><span>段落内还可以通过“编组”的能力，将两个或多个组件打包起来进行排版；</span></li></ol><p data-lake-id=\"9c051219055de1f03117641520f60b1d\" id=\"u984fe506\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>通过自然布局提供的上述能力，一个非研发或者非设计的同学能够高效的搭建一个页面出来，这是让低代码搭建平台能够真正实现赋能的关键。自然布局还在持续迭代中，目前覆盖的场景有限，希望后续能够覆盖更多的场景。</span></p><h1 data-lake-id=\"b11d0fba358f54801b1b8604a3379d1c\" id=\"o6kMp\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 28px; line-height: 36px;\"><span>从研发链路看问题——前端物料即设计物料</span></h1><p data-lake-id=\"89ac2638b1bff603bad15b806e4de3a8\" id=\"u57d98a57\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>前面的内容不管是源码物料还是低代码物料的提效都还是站在开发的视角去考虑的，我们试着从全局视角来看整个研发链路中还有什么问题可以通过物料来提效的。</span></p><p data-lake-id=\"18caab7cde91feb72ec76bccc734e435\" id=\"u6e0e199a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/gif/231502/1618161079482-d2dddb6a-6760-4b84-9bfb-1f8e78062ed4.gif\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"1.gif\" title=\"1.gif\" data-height=\"375px\" style=\"visibility: visible; width: 600px;\"></span></p><p data-lake-id=\"e33433e17f31dbb23df8d0459f2e4057\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们发现从产品原型到设计稿再到页面实现，虽然有设计规范的约束，但三者之间还是会有差异，那么存在这个差异的核心原因是什么呢？</p><p data-lake-id=\"95923a4ed1a5f937cc7e7fa04f2299df\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618161086573-fb46558a-6c69-47f2-a341-fc73ec7b0d40.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"338px\" style=\"visibility: visible; width: 600px;\"></span></p><p data-lake-id=\"7a6bee17c87c3868846fddf99acecf3c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618161092077-59a1a308-6dbd-482b-88e5-4062581c32f9.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"338px\" style=\"visibility: visible; width: 600px;\"></span></p><p data-lake-id=\"bf467e29ca7d8ad0a647896bd428d87c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">要实现前端物料及设计物料，需要设计者(产品经理、设计师)和开发者使用的是同一份物料，那么就有两种方式：本地设计和在线设计；</p><p data-lake-id=\"f2ed4217e2db05ddcad83a11ba68caab\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">本地设计就是要让设计者在 sketch 上能够使用前端物料来设计页面，这里我们通过 react-sketch 这个库实现了在 sketch 上渲染 react 组件，从而实现让设计者在 sketch 上使用前端物料来设计页面；</p><p data-lake-id=\"a523cfb150bb0817f7e1a6864c8af27f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">而在线设计是我们正在探索的新思路，这也是低代码搭建的一个很好的应用场景。我们可以想一下，产品经理产出原型稿是不是在相应的工具(例如 axure)上进行“<strong>搭建</strong>”，设计师产出设计稿是不是也是在设计工具(sketch)上进行“<strong>搭建</strong>”，而使用低代码研发平台的开发者也是在搭建平台通过前端物料进行页面产出；那么既然三者都是搭建，那是否可以使用同一套搭建体系呢？设计在线就是这个思路，我们站着设计者的视角提供搭建工具，在不增加设计者原先工作量的前提下，然设计者能够更快速的产出高保真原型，并且这个原型可以直接流转到低代码研发平台让开发者进行二次搭建。</p><p data-lake-id=\"7c494ce855ec09c6fee5aef1417d5938\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" class=\"lake-card-margin-top lake-card-margin-bottom\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1618161108636-31a10186-5b9e-4503-b3a5-ab90adacc863.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"335px\" style=\"visibility: visible; width: 600px;\"></span></p></div>",
			"creator": "程科(金禅)",
			"word_count": 6258,
			"hits": 46
		}
	}, {
		"name": "「预热桶」限流算法详解(附 Node.js 实现)",
		"cnName": "「预热桶」限流算法详解(附 Node.js 实现)",
		"locator": "lop7ur",
		"category": "「预热桶」限流算法详解(附 Node.js 实现)",
		"document": {
			"updated_at": "2022-03-17T17:31:29.000Z",
			"locator": "lop7ur",
			"title": "「预热桶」限流算法详解(附 Node.js 实现)",
			"data": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B0%2C0%2C0%2C0%5D%2C%5B0%2C0%2C0%2C0%5D%5D%2C%22active%22%3Atrue%7D\"><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p data-lake-id=\"ba0fa104dc52417a503cbff396655b9d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">「预热桶」是我自己取的名字，它来源于 Google 的 Guava 工具包里的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java\" target=\"_blank\">SmoothWarmingUp</a></code> 类，表示带预热的令牌桶算法。</p></blockquote><p data-lake-id=\"757a38e293c47a5219f45dafbb86a9b6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">限流是在高并发场景下，保证系统稳定性的一把利器，在之前的文章中我介绍了集中基础的限流算法，本文重点介绍一个更高级的限流算法——『预热桶算法』的原理和实现；</p><h2 data-lake-id=\"d8dec932d31137bfad97930b98fa79fb\" id=\"5Qp6T\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">「预热桶」的由来</h2><p data-lake-id=\"f0f4ee962f6ed756e61ab8bdea45acc9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在使用「限流器」的时候，我们需要给设置一个合适的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">阈值</code> ，这个阈值通常是一个系统能够正常工作所能承受的最大 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">QPS</code> 。当系统的请求量达到阈值时，不同的限流器主要有两种处理方式，一种是对超过阈值的请求直接返回失败，另一种是让超过阈值的请求排队等待。</p><p data-lake-id=\"b86590d058d19d13a657c9cb5a7621dd\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">要控制系统的 QPS 不超过阈值最简单的方式就是控制每个请求的间隔；例如，如果一个系统的 QPS 阈值是 100，那我们只要保证每个请求的间隔不要低于 1(s)/100 = 10ms 就可以了；每个请求进来时，限流器会计算出当前时间与上一个请求的间隔(interval)，如果大于interval &gt;= 10ms 则表示当前 QPS 小于 100 直接放行，如果 Interval &lt; 10ms，例如 Interval = 9ms 时，则需要让这个请求等待 1ms 再执行。</p><p data-lake-id=\"5e9d8caf12028e3f87df692e4acf0a05\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们发现，上面这种限流器对系统状态的记录是非常粗略的，它只是记录了上次请求的时间。这种方式对请求的控制粒度太细了，没有 buffer，其实我们希望的粒度是 QPS；试想一下如果现在有两个请求相隔 1ms 发送过来了，系统也一段时间内也只接收到这两个请求，远低于阈值定义的 100，但是按照上面的算法，晚到的请求要等待 9ms 后再执行，这显然是不合理的。</p><p data-lake-id=\"0414656e1be44a2444ae8b4044d9962f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">一个系统的利用率低说明这个系统有多余的资源可被利用。这样的话，「限流器」应该适当提速一会儿，让这些资源能够被好好利用起来。</p><p data-lake-id=\"52738341db9cb3e20c52c1a7add42ce9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">然而从另一个角度来看，系统利用率一直处于低下状态也有可能意味着系统还没准备好应对更多的请求，因为长时间处于低利用率下，系统由于所依赖资源的限制，并不能立马达到它正常的服务水平；例如系统依赖的缓存过期导致新的请求会直接请求 db，再比如很多系统使用了连接池，长时间的 idle 情况下连接池只会保持少量的连接，新的请求会重新创建连接，这些都是耗时操作，完成这些操作之后，系统才能到达正常的服务水平；</p><p data-lake-id=\"17e2b13eabaa57f1a46905fbbf048652\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通过上面的情况可以看出，只给限流器设置一个系统正常情况下能够处理请求的 QPS 阈值是不够的，系统在预热阶段就算是低于阈值的请求量进来也可能会把系统压垮，所以我们需要一个能够应对系统预热期的限流算法，这就是「预热桶」算法的由来。</p><h2 data-lake-id=\"f1b2a874a474e6cd2ff5616f9bacf56b\" id=\"6vNqj\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">「预热桶」算法原理</h2><p data-lake-id=\"8dbaca9fa61ba47197b06af708ce36a3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们先重温一下令牌桶算法的原理：</p><ol data-lake-id=\"8de933516e793986b8ad8f5adf56e6de\" lake-indent=\"0\" style=\"list-style-type: decimal; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"28ad12d8c0b52bea68939ae620f5f120\">令牌以固定速率生成；<br></li><li data-lake-id=\"8c48c4262957aa2aeeeaf537e6d48117\">生成的令牌放入令牌桶中存放，如果令牌桶满了则多余的令牌会直接丢弃，当请求到达时，会尝试从令牌���中取令牌，取到了令牌的请求可以执行；<br></li><li data-lake-id=\"5b94f4310dce72863ecacfb02bece264\">如果桶空了，那么尝试取令牌的请求会被直接丢弃。<br></li></ol><p data-lake-id=\"45204fc7e23d2b5268a587e70b31fbad\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e94090f1412970efa0c6b1ab0003c69e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img referrerpolicy=\"no-referrer\" data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2021/jpeg/231502/1617017037424-2efeb8da-bdbf-4b28-898e-af3d57489cc2.jpeg\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image\" title=\"image\" data-height=\"446px\" style=\"visibility: visible; width: 698px;\"></span></p><p data-lake-id=\"a1b7cb2d3e9590e9753f6e3d2549df63\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"3fad921c6d5e97c778020c9cec4a3379\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">「预热桶」其实就是令牌桶的升级版，主要区别在于：我们假设系统的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">阈值 QPS</code> 为 count，在「令牌桶」中获取单个令牌的时间是固定的：<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">1 / count</code> ，而从「预热桶」中获取单个令牌的时间是随着存量令牌的数量 storedPermits 而变化的；</p><p data-lake-id=\"1351d45da5bc0965078171e30ff2b9a0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们假设系统刚启动或者长时间没有收到请求处于冷却状态，这个时候令牌达到饱和数量：maxPermits；当有慢慢有请求开始消耗令牌时，存在一个预热期，在预热期间内<span>获取单个令牌的时间</span>(Interval)会比平稳期<span>获取单个令牌的时间</span>要长(想想这意味着什么？)，随着令牌的减少，<span>获取单个令牌的时间</span>会慢慢变短，最终到达一个稳定值 stableInterval；在稳定期<span>获取单个令牌的时间</span>是 stableInterval；</p><p data-lake-id=\"1809ce980c542230950fe0fdd9f45ce1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>我们知道 qps 全称 query per second，表示一秒钟的请求量，这和<span>获取单个令牌的时间</span>刚好是倒数关系；假设系统的 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">阈值 QPS</code> 为 count，这意味着从「预热桶」中<span>获取单个令牌</span>的时长不能短于 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">1 / count</code> 即上文中的 `stableInterval`，在「预热桶」中，随着令牌数的减少，<span>获取单个令牌</span>的时长会变短直到 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">1 / count</code>，从另一个角度来看就是：随着令牌数的减少，「预热桶」放行的请求 QPS 会</span>逐渐<span>增加直到 count，这正是我们所期望达到的效果。</span></p><p data-lake-id=\"0ac95e6f73c8c037b10d64cf8d6ac464\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">前面说到在预热期获取单个令牌的时间要比稳定期获取单个令牌的时间 stableInterval 长一些，那么具体要比 stableInterval 长多少呢？</p><p data-lake-id=\"c3e9abfa0f2afde0861da75b3cad0ea7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">我们可以定义一个<span>冷却因子(coldFactor)</span> ，令系统处于最冷的状态下获取一个令牌的时长 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">coldInterval = stableInterval * coldFactor</code> ；「预热桶」从最冷状态到完成预热进入稳定期有个转折点，到达这个转折点时的令牌数量我们用 thresholdPermits 表示；这样，我们就获得了一个获取(一个)令牌的时长随着令牌数量变化的连续函数 f(storedPermits) ：</p><ul data-lake-id=\"611b183449711bf616a9ceae8a171bc9\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"87b233971a4d4cd77c526891953a89d6\">0 &lt;= storedPermits &lt;= thresholdPermits 时；f(storedPermits) = stableInterval; // 常数函数，函数值始终为 stableInterval ;<br></li><li data-lake-id=\"5b26df1f91af45c0dbfae6459c143916\">thresholdPermits &lt;= storedPermits &lt;= maxPermits 时，f(storedPermits) = (coldInterval - stableInterval) * storedPermits / (maxPermits - thresholdPermits); // 正比例函数，比例常数为 (coldInterval - stableInterval) / (maxPermits - thresholdPermits) ;<br></li></ul><p data-lake-id=\"62957d568e4f1211ae6a74ac1a9072a8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">该函数绘制成图如下所示：</p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"wom33\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">^ throttling\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |        \\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">       cold  +              |   /\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    interval |              |  /.\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |              | / .  \\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |              |/  .   \\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |              +   .   ← \"f(storedPermits)\"  \\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |             /|   .\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |            / |   .\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |           /  |   .\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      stable +----------/   |   .   ← \"warmup period\"  \\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    interval |          .   |   .      is the area of the trapezoid between thresholdPermits and maxPermits\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |          .   |   .\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             |          .   |   .\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">           0 +----------+---|---+--------------→ storedPermits\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">             0 thresholdPermits maxPermits</span></span></pre></div></div></div><p data-lake-id=\"54e97164f04ae9c37b66f2751a1c0a05\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>「预热桶算法原理图」</span></p><p data-lake-id=\"16226b71307cec90637954f0f5cee610\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在上面这张图中，我们画一条与 x 轴垂直的线 n，这条线与函数曲线的交点的纵坐标当前 storedPermits 数量下获取单个令牌所需的时间；</p><ul data-lake-id=\"b3aabedd4861580fb814c4a6d3227b4b\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"1f8f271b61770aef963b81562eb09e59\">当我们从右向左移动 n 时，表示系统接收到请求，令牌正在被消耗，假设系统连续接收到 k 个请求，获取对应令牌所需要的时间为：<br></li></ul><p data-lake-id=\"502d30c459e4292301a7b7f28a5ba002\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">t = f(maxPermits) + f(maxPermits - 1) + f(maxPermits - 2) + ... + f(maxPermits - k)，通过微积分的知识可以看出来这是在求函数 f 在 maxPermits - k 到 maxPermits 区间的<span>定积分</span>，可以用这个区间的函数图形的面积表示；</p><ul data-lake-id=\"934acf05f412654a34c0dca5f6a67b45\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"2d8216ccdd32280df2682dc525c30492\">相反，当我们从左向右移动 n 时，表示有令牌新增，这个过程被称为<span>冷却</span>，由于这个过程跟概算法对系统预热的支持没有直接影响，因此<span>冷却</span>过程在 Guava 和 Sentinel 中的实现方式有些差异，后文会讲到；<br></li></ul><h2 data-lake-id=\"8812989982f1e2b850149d3ac17817ae\" id=\"6wzy9\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">「预热桶」算法的实现</h2><p data-lake-id=\"0cd1f71d93ed10f21573316ba5672ec9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Guava 跟 Sentinel 的实现方式略有不同，感兴趣的同学可以分别看看实现的源码：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java\" target=\"_blank\">SmoothRateLimiter(Guava)</a>、<a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/Sentinel/blob/master/sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/controller/WarmUpController.java\" target=\"_blank\">WarmUpController(Sentinel)</a>；</p><p data-lake-id=\"dfe8a99ab044df1c42836534f4b4edb1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">上面已经把「预热桶」算法的原理讲得很清楚了，我们现在尝试着用 node.js 实现一下；</p><p data-lake-id=\"02265b9c2cd3e79203e514410152e174\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">首先我们定义一个类 WarmupRateLimit，我们在系统中一般会这样来使用限流器：</p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"ynuI5\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">constuctor() {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.warmupRatelimit = new WarmupRateLimit(/** QPS 阈值 */1000, /** 预热时间 */ 10, /** 冷却因子 */ 3);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// function bizFunction()\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // node 里记录了当前接口/资源的 qps 等信息\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    if(!warmupRatelimit.canPass(node, acquireCount)) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        // 返回请求被限流的错误\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      // 业务代码\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// }</span></span></pre></div></div></div><p data-lake-id=\"1cb0141bf5a2447d8358059bc5448b07\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通过上面的使用方式，我们大概能够写出 WarmupRateLimit 的主要结构：</p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"yDWPo\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class WarmupRateLimit {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  constructor(count, warmupPeriod, coldFactor) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.count = count;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.warmupPeriod = warmupPeriod;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.coldFactor = coldFactor;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 判断当前请求是否能通过\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  canPass(node, acquireCount) { \\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><p data-lake-id=\"6167edd7ce2da1d38a49f1123e238546\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">根据「预热桶」算法的原理，我们还需要记录桶里当前存储的令牌数 storedPermits，根据请求所需要消耗的令牌数(默认是 1 )来计算获取令牌所需要的时间 currentRequestCost，而此时限流器限制的 QPS 阈值则是 `1/currentRequestCost`；判断 1/currentRequestCost 与 node 中记录的当前 qps 值来决定是否让该请求通过，代码实现如下：</p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"C2ZAl\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class WarmUpController extends Controller {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  constructor(count, warmUpPeriod, coldFactor) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    super();\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.count = count;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.coldFactor = coldFactor;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.lastFilledTime = Date.now();\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 假设系统从开始进入稳定期到完全稳定(令牌的获取速度和令牌的加入速度持平，storedPermits = 0) 所需的时间占令牌完全消耗的时间的 1/coldFactor，\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 即 thresholdPermits*stableInterval/(thresholdPermits*stableInterval + warmUpPeriod) = 1/coldFactor，\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 而从上面的函数图形中我们知道预热时间为梯形面积 warmUpPeriod = 0.5*(stableInterval + coldInterval)*(maxPermits - thresholdPermits)；\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.thresholdPermits = (warmUpPeriod * count) / (coldFactor - 1);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.maxPermits = this.thresholdPermits + (2 * warmUpPeriod * count / (1 + coldFactor));\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 预热期比例常数\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.slope = ((coldFactor - 1) * (this.maxPermits - this.thresholdPermits)) / count;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 令牌初始值为令牌最大值\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.storedPermits = this.maxPermits;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // 判断当前请求是否能通过\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  canPass(node, acquireCount) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    const currentQps = node.passQps();\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.resync(node.previousPassQps());\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    let cost;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    if (this.storedPermits &gt; this.thresholdPermits) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      // 处于预热期的令牌数\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      const warmUpPermits = this.storedPermits - this.thresholdPermits;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      if (acquireCount &lt; warmUpPermits) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        cost = this.slope * acquireCount;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      } else {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        cost = this.slope * warmUpPermits + (1 / this.count) * (acquireCount - warmUpPermits);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      if (currentQps + acquireCount &lt; 1 / cost) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        return true;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    } else if (currentQps + acquireCount &lt; this.count) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      return true;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    return false;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  resync(passQps) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    let currentTime = Date.now();\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    currentTime = currentTime - currentTime % 1000;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    const oldLastFillTime = this.lastFilledTime;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    if (currentTime &lt;= oldLastFillTime) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      return;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.storedPermits = this.coolDownTokens(currentTime, passQps);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    const currentValue = this.storedPermits - passQps;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.storedPermits = Math.max(currentValue, 0);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.lastFilledTime = currentTime;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  coolDownTokens(currentTime, passQps) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    const oldValue = this.storedPermits;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    let newValue = oldValue;\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 添加令牌的判断前提条件:\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // 当令牌的消耗程度远远低于警戒线的时候\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    if (oldValue &lt; this.thresholdPermits) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      newValue = (oldValue + (currentTime - this.lastFilledTime) * this.count / 1000);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    } else if (oldValue &gt; this.thresholdPermits) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      if (passQps &lt; (this.count / this.coldFactor)) {\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        newValue = (oldValue + (currentTime - this.lastFilledTime) * this.count / 1000);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">      }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    return Math.min(newValue, this.maxPermits);\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><h2 data-lake-id=\"71e3da06cabfb8a03b4126834f6a33d0\" id=\"hKyFn\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">小结</h2><p data-lake-id=\"6d147ced15a9f9b5be8634b3b746442a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">可以看到，「预热桶」的核心思想是在系统提供的预热时间内让阈值 QPS 线性增长，最终达到稳定期的阈值 QPS，说起来比较简单，但实现起来还是有些复杂；本文从「预热桶」的使用场景到原理分析再到代码实现，比较全面的讲解了「预热桶」算法，希望对想要了解该算法的同学有些帮助；如果有同学发现文中有什么不对的地方也欢迎指正、互相交流一下。</p><p data-lake-id=\"47f45e8cdeb67f17fed225fa6f18a586\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
			"creator": "程科(金禅)",
			"word_count": 2975,
			"hits": 4
		}
	}, {
		"name": "Javascript 工作原理",
		"cnName": "Javascript 工作原理",
		"locator": "ny150b",
		"category": "Javascript 工作原理",
    "depth": 1,
		"document": {
			"updated_at": "2022-03-17T17:31:34.000Z",
			"locator": "ny150b",
			"title": "Javascript 工作原理",
			"data": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><h2 id=\"iwmGW\" style=\"text-align: justify\"><span class=\"ne-text\">Javascript 定义</span></h2><ul class=\"ne-ul\"><li id=\"ee0a978143f5b40a803aea8c903ef140\" style=\"text-align: justify\"><span class=\"ne-text\">单线程</span></li><li id=\"e164042150c64f1351f447d6b5d1a38c\" style=\"text-align: justify\"><span class=\"ne-text\">异步 IO</span></li></ul><ul start=\"3\" class=\"ne-ul\"><li id=\"039429c9fed28e2779dd6371064c131f\" style=\"text-align: justify\"><span class=\"ne-text\">并发</span></li><li id=\"27c488654763e0b0ab5b730ae60a3eb3\" style=\"text-align: justify\"><span class=\"ne-text\">基于原型的面线对象</span></li></ul><ul start=\"5\" class=\"ne-ul\"><li id=\"fdc3f6fe93b945aa00209a5c6bdee5dd\" style=\"text-align: justify\"><span class=\"ne-text\">脚本语言</span></li></ul><h2 id=\"8lHD3\" style=\"text-align: justify\"><span class=\"ne-text\">Javascript 引擎与运行时环境</span></h2><p id=\"b6a5541c3169e8f16dce6e12395d075f\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">Javascript 引擎和运行时环境这两个概念很容易被弄混，但它俩真不是一个东西。Javascript 引擎做的事情是实现 ECMAScript 标准，解释（或编译） Javascript 代码；而运行环境是包括引擎并提供一些类库让 Javascript 代码能够在其上运行，例如 Chrome, Node。</span></p><h2 id=\"Uc10w\" style=\"text-align: justify\"><span class=\"ne-text\">为什么设计为单线程？</span></h2><div class=\"ne-quote\"><p id=\"6d799ff4d74236bb05f5f8a5a277bc04\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</span></p><p id=\"1d96e109d21ac130f1054f6e54a94b8e\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</span></p><p id=\"30376cc31bf503533c273d5b84a42b09\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</span></p><p id=\"a98955c43bdc8c737ebfe7cec2cf7929\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</span></p><p id=\"eb061aa109afda7dbaa77bde4efba847\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">摘自 </span><a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" data-href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</span></a></p></div><h2 id=\"4rukO\" style=\"text-align: justify\"><span class=\"ne-text\">单线程如何异步，如何并发？</span></h2><p id=\"ce871da2c7b19fcee904ee7e1e2e72f2\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">我们知道，在一段程序代码中发起一个调用并等待直到调用返回结果再执行接下来的代码，这个调用对于这段程序来说是同步的；而发起一个调用后不用等待调用结果而直接执行后面的代码，这个调用对于这段程序来说就是异步的。</span></p><p id=\"fc1d2efd917257b34efbbc1f3392cd4c\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">异步意味着在主逻辑中被异步调用的代码和主逻辑继续执行的代码会同时执行，这其实是实现了并发。回想一下我们在 Java 或者其它多线程语言中是如何实现异步的，一般来说，要创建一个异步任务，我们通常会创建一个线程然后在线程中执行该任务，这个任务和创建它的线程就可以并发执行了。但 Javascript 单线程的特性显然和这异步、并发是有冲突的，那么为什么说 Javascript 支持异步，支持并发呢？</span></p><p id=\"15a01742e2db13fa3c2cffc55b63ab18\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">其实理解起来也很简单，Javascript 本身并不是异步的，而 Javascript 程序是异步的。具体来说就是，Javascript 编写的代码自身运行于单线程中，当遇到 IO 调用，就把它丢给运行时环境处理，自身继续执行后面的代码，当 IO 调用有了结果，会将结果及回调放在一个队列里，Javascript 线程会在合适的时机将回调函数取出并执行。</span></p><p id=\"f9700fd1f6ddf718ff875977a8730120\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">Javascript 程序的异步由其运行时环境提供，通过</span><code class=\"ne-code\"><span class=\"ne-text\">event loop</span></code><span class=\"ne-text\">实现异步编程，并提供并发支持。</span></p><p id=\"8b687f124994f29042b58a8093c13c4e\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">实现异步编程可以有很多种方式(</span><code class=\"ne-code\"><span class=\"ne-text\">编程模型</span></code><span class=\"ne-text\">)，想了解更多可以先看看</span><a href=\"http://www.jianshu.com/p/c4dc7866eb81\" data-href=\"http://www.jianshu.com/p/c4dc7866eb81\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">这篇文章</span></a><span class=\"ne-text\">。</span></p><h2 id=\"2QyHc\" style=\"text-align: justify\"><span class=\"ne-text\">Javascript 具体是如何工作的</span></h2><p id=\"6547095debc16a5001a544a7c4824ccc\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">单说</span><code class=\"ne-code\"><span class=\"ne-text\">Javascript 是如何工作的</span></code><span class=\"ne-text\">其实不太准确，应该说</span><code class=\"ne-code\"><span class=\"ne-text\">Javascript 在其运行时环境上是如何工作的</span></code><span class=\"ne-text\">才对，Node 和 Chrome 都是 Javascript 的运行时环境，它们使用相同的 JavaScript 引擎(V8)，都应用基于 </span><code class=\"ne-code\"><span class=\"ne-text\">event loop</span></code><span class=\"ne-text\"> 的并发模型( Chrome 内核使用了 libevent 而 Node 则基于 libuv )，那么 Javascript 在这样的运行时环境下是如何工作的呢？</span></p><p id=\"ed52012df77075905b4c62fbedfc3c79\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">是时候祭出这张图了</span></p><p id=\"7ce5ab31822a5c7b4953c89e55ac9517\" class=\"ne-p\" style=\"text-align: justify\"><img referrerpolicy=\"no-referrer\" src=\"https://cdn.nlark.com/yuque/0/2021/png/231502/1622352798786-e1536a4b-a82f-4e0f-a5e8-2c136e2e774f.png\" width=\"300.5\" id=\"ue2b402c7\" class=\"ne-image\"></p><div class=\"ne-quote\"><p id=\"bb7f015cf88cf305809c50842ff2d87e\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">此图来自Philip Roberts的演讲</span><a href=\"http://vimeo.com/96425312\" data-href=\"http://vimeo.com/96425312\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《Help, I’m stuck in an event-loop》</span></a></p></div><p id=\"d90f2c5e4239aaa5cb84c8d289120ebb\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">这张图讲的是 Javascript 在浏览器中的工作原理，在 Node 中也差不多，很具有代表性。</span></p><p id=\"1af8859f184560486c9a5f2a95329845\" class=\"ne-p\" style=\"text-align: justify\"><strong><span class=\"ne-text\">看图说话</span></strong></p><ol class=\"ne-ol\"><li id=\"d72148643a2947f0f708989931c17100\" style=\"text-align: justify\"><span class=\"ne-text\">V8 在编译执行 Javascript 代码过程中会生成堆( heap ) 和栈 ( stack )，heap 存放的程序运行过程中产生的一些对象，stack 是 Javascript 执行栈，程序代码会根据调用关系被压入栈中执行；</span></li><li id=\"eccd5a35bda955f0e9b9c509e3d6e24e\" style=\"text-align: justify\"><span class=\"ne-text\">当遇到调用 WebAPIs（IO 或者 定时器）时，浏览器会响应调用并直接返回，stack 继续执行剩余 Javascript 代码；</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"5f551fa512056f0e55f3d0ec6ddba850\" style=\"text-align: justify\"><span class=\"ne-text\">当 WebAPIs 调用完成，会将相应的回调与结果依次放入 </span><code class=\"ne-code\"><span class=\"ne-text\">callback queue</span></code><span class=\"ne-text\"> 中；</span></li><li id=\"13d1ef412f8f3f3647f5dc8be8295189\" style=\"text-align: justify\"><span class=\"ne-text\">当执行栈中如果没有要执行的 Javascript 代码，则会通过 </span><code class=\"ne-code\"><span class=\"ne-text\">event loop</span></code><span class=\"ne-text\"> 检查并取出 </span><code class=\"ne-code\"><span class=\"ne-text\">callback queue</span></code><span class=\"ne-text\"> 中第一个回调函数，并执行它。</span></li></ol><p id=\"d5fbe531a9ed0ee6fcb83661951643e3\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">这样，我们所编写的 Javascript 代码会在</span><code class=\"ne-code\"><span class=\"ne-text\">执行引擎</span></code><span class=\"ne-text\">的执行栈中以单线程的方式运行，而所有 IO 或定时任务会通过运行环境异步执行，并将执行结果放在 </span><code class=\"ne-code\"><span class=\"ne-text\">callback queue</span></code><span class=\"ne-text\"> 中等待被调用，这就是所谓的单线程异步的工作原理，当然 Javascript 实际运行环境的实现会比这复杂一些，但基本原理就是这样；理解这个原理能够让我们更加清楚我们的每一段代码在运行环境中是如何执行的，有很多疑惑例如：程序代码中的多个回调会在什么时候被调用？为什么复杂的计算逻辑要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">setImmediate(function () { // 计算逻辑 }); 或 process.nextTick(function () { // 计算逻辑 });</span></code><span class=\"ne-text\"> 包起来？就容易理解了。</span></p><h2 id=\"c8UIk\" style=\"text-align: justify\"><span class=\"ne-text\">小结</span></h2><p id=\"2e54ab0d2b496c13cb505d1b3e38dd2e\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">本文主要解释了 Javascript 作为单线程语言，其程序是如何实现异步的，同时也大概讲解了 Javascript 在其运行时环境中的工作原理；在解惑的同时也带来了一些疑惑：</span></p><ul class=\"ne-ul\"><li id=\"7e34b456985fcb9c020ac2f40e8aa7a4\" style=\"text-align: justify\"><code class=\"ne-code\"><span class=\"ne-text\">setImmediate 和 process.nextTick</span></code><span class=\"ne-text\"> 的区别是什么？</span></li><li id=\"230325e005ff59051dd1a52773d8149d\" style=\"text-align: justify\"><span class=\"ne-text\">既然 Javascript 程序也是通过(运行时环境)底层的多线程实现异步，那跟多线程语言实现的异步有什么不同？</span></li></ul><ul start=\"3\" class=\"ne-ul\"><li id=\"033d98d3f84debabe90cf6c972c85875\" style=\"text-align: justify\"><span class=\"ne-text\">为什么说基于 </span><code class=\"ne-code\"><span class=\"ne-text\">Event loop</span></code><span class=\"ne-text\"> 实现异步编程模型的 </span><code class=\"ne-code\"><span class=\"ne-text\">Node</span></code><span class=\"ne-text\"> 更适合 IO 密集型的应用，底层不都是多线程吗？</span></li></ul><p id=\"99cb812d6600a8413e229b531fcfa731\" class=\"ne-p\" style=\"text-align: justify\"><span class=\"ne-text\">这些问题也是我在做 Javascript 开发不同阶段中真真实实遇到的疑惑，通过自己一步一步的探索得到了一些解释，希望也能帮到正遇到这些疑惑的朋友们，如有问题，请指出。</span></p><h2 id=\"pcBhW\" style=\"text-align: justify\"><span class=\"ne-text\">参考</span></h2><p id=\"04978c6bfa9561eb50b883c5931d47a6\" class=\"ne-p\" style=\"text-align: justify\"><a href=\"http://blog.csdn.net/lin_credible/article/details/40143961\" data-href=\"http://blog.csdn.net/lin_credible/article/details/40143961\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">朴灵评注-JavaScript 运行机制详解：再谈Event Loop</span></a></p><p id=\"ae39f23e6110e70a85378cedcc18e56a\" class=\"ne-p\" style=\"text-align: justify\"><a href=\"http://vimeo.com/96425312\" data-href=\"http://vimeo.com/96425312\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Help, I’m stuck in an event-loop</span></a></p><p id=\"b2d4039767df3e49836f99ac373df202\" class=\"ne-p\" style=\"text-align: justify\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">并发模型与Event Loop</span></a></p><p id=\"c49370c0a4e9f9f3e1191d1ac7eda6ab\" class=\"ne-p\" style=\"text-align: justify\"><a href=\"http://www.cnblogs.com/dolphinX/p/3475090.html\" data-href=\"http://www.cnblogs.com/dolphinX/p/3475090.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">关于node.js的误会</span></a></p><p id=\"0b833c09dcf692523287a1e7fdcef6f1\" class=\"ne-p\" style=\"text-align: justify\"><a href=\"https://github.com/goddyZhao/GPosts/blob/master/javascript/%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E9%80%94%E5%BE%84%E8%83%BD%E5%A4%9F%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JavaScript%E8%A7%A3%E6%9E%90%E5%BC%95%E6%93%8E%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F.md\" data-href=\"https://github.com/goddyZhao/GPosts/blob/master/javascript/%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E9%80%94%E5%BE%84%E8%83%BD%E5%A4%9F%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JavaScript%E8%A7%A3%E6%9E%90%E5%BC%95%E6%93%8E%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F.md\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">通过什么途径能够深入了解JavaScript解析引擎是如何工作的？</span></a></p><p id=\"8c868527dcf36185c10ef70d940c3b5e\" class=\"ne-p\" style=\"text-align: justify\"><a href=\"https://cnodejs.org/topic/4f16442ccae1f4aa2700113b\" data-href=\"https://cnodejs.org/topic/4f16442ccae1f4aa2700113b\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">nodejs异步IO的实现</span></a></p></div>",
			"creator": "程科(金禅)",
			"word_count": 1823,
			"hits": 10
		}
	}],
	"documents": [{
		"id": 46284082,
		"slug": "me",
		"title": "关于我",
		"description": null,
		"user_id": 231502,
		"book_id": 1053012,
		"format": "lake",
		"public": 1,
		"status": 1,
		"view_status": 0,
		"read_status": 1,
		"likes_count": 1,
		"read_count": 0,
		"comments_count": 0,
		"content_updated_at": "2021-05-31T03:37:36.000Z",
		"created_at": "2021-05-30T21:16:02.000Z",
		"updated_at": "2022-03-17T17:31:53.000Z",
		"published_at": "2021-05-31T03:37:36.000Z",
		"first_published_at": "2021-05-30T21:16:49.000Z",
		"draft_version": 4,
		"last_editor_id": 231502,
		"word_count": 289,
		"cover": null,
		"custom_description": "关于我我叫程科，花名金禅，目前就职于阿里巴巴，是集团前端委员会中后台物料生态负责人，集团低代码引擎共建小组核心成员。2018 年加入阿里巴巴业务平台事业部体验技术团队，目前专注于前端物料生态、低代码研发领域。关于本站本站是基于我开发的 YuQueViewer 搭建的个人博客，博客内容通过语雀编...",
		"last_editor": {
			"id": 231502,
			"type": "User",
			"login": "mark.ck",
			"name": "程科(金禅)",
			"description": "{\\n  \"github\": \"https://github.com/mark-ck\",\\n  \"beian\": \"粤ICP备 16116485 号\"\\n}",
			"avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/231502/1575430020486-avatar/64bbc238-6ee3-4ae8-aae5-81fad0f4b3f0.png",
			"followers_count": 0,
			"following_count": 4,
			"created_at": "2018-12-25T09:49:25.000Z",
			"updated_at": "2022-03-17T17:31:53.000Z",
			"_serializer": "v2.user"
		},
		"book": null,
		"_serializer": "v2.doc"
	}, {
		"id": 43409360,
		"slug": "kk06ev",
		"title": "前端物料在低代码研发模式下的探索",
		"description": null,
		"user_id": 231502,
		"book_id": 1053012,
		"format": "lake",
		"public": 1,
		"status": 1,
		"view_status": 0,
		"read_status": 1,
		"likes_count": 3,
		"read_count": 0,
		"comments_count": 0,
		"content_updated_at": "2021-04-11T17:26:03.000Z",
		"created_at": "2021-04-11T16:59:50.000Z",
		"updated_at": "2022-03-17T17:31:10.000Z",
		"published_at": "2021-04-11T17:26:03.000Z",
		"first_published_at": "2021-04-11T17:12:48.000Z",
		"draft_version": 19,
		"last_editor_id": 231502,
		"word_count": 6258,
		"cover": "https://cdn.nlark.com/yuque/0/2021/png/231502/1618160454595-8e12236f-aa98-42f0-8d0e-c831e8d7637c.png",
		"custom_description": "前言“Low-Code(低代码)” 最早是由 Forrester 提出的，在近几年又赢来了一轮爆发，2021 钉钉 6.0 发布会推出了“宜搭 YIDA”，2020 年底腾讯云推出了“微搭低代码 WeDa”，2019 年百度开源了低代码研发框架 “AMIS”；低代码研发平台的融资消息越来越多，...",
		"last_editor": {
			"id": 231502,
			"type": "User",
			"login": "mark.ck",
			"name": "程科(金禅)",
			"description": "{\\n  \"github\": \"https://github.com/mark-ck\",\\n  \"beian\": \"粤ICP备 16116485 号\"\\n}",
			"avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/231502/1575430020486-avatar/64bbc238-6ee3-4ae8-aae5-81fad0f4b3f0.png",
			"followers_count": 0,
			"following_count": 4,
			"created_at": "2018-12-25T09:49:25.000Z",
			"updated_at": "2022-03-17T17:31:53.000Z",
			"_serializer": "v2.user"
		},
		"book": null,
		"_serializer": "v2.doc"
	}, {
		"id": 33810105,
		"slug": "lop7ur",
		"title": "「预热桶」限流算法详解(附 Node.js 实现)",
		"description": null,
		"user_id": 231502,
		"book_id": 1053012,
		"format": "lake",
		"public": 1,
		"status": 1,
		"view_status": 0,
		"read_status": 1,
		"likes_count": 1,
		"read_count": 0,
		"comments_count": 0,
		"content_updated_at": "2021-03-29T11:25:50.000Z",
		"created_at": "2021-03-29T11:23:46.000Z",
		"updated_at": "2022-03-17T17:31:29.000Z",
		"published_at": "2021-03-29T11:25:50.000Z",
		"first_published_at": "2021-03-29T11:25:50.000Z",
		"draft_version": 2,
		"last_editor_id": 231502,
		"word_count": 2975,
		"cover": "https://cdn.nlark.com/yuque/0/2021/png/231502/1617017149277-faf14a01-4bfa-4545-846b-a50277cc7dfa.png",
		"custom_description": "限流是在高并发场景下，保证系统稳定性的一把利器，在之前的文章中我介绍了集中基础的限流算法，本文重点介绍一个更高级的限流算法——『预热桶算法』的原理和实现",
		"last_editor": {
			"id": 231502,
			"type": "User",
			"login": "mark.ck",
			"name": "程科(金禅)",
			"description": "{\\n  \"github\": \"https://github.com/mark-ck\",\\n  \"beian\": \"粤ICP备 16116485 号\"\\n}",
			"avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/231502/1575430020486-avatar/64bbc238-6ee3-4ae8-aae5-81fad0f4b3f0.png",
			"followers_count": 0,
			"following_count": 4,
			"created_at": "2018-12-25T09:49:25.000Z",
			"updated_at": "2022-03-17T17:31:53.000Z",
			"_serializer": "v2.user"
		},
		"book": null,
		"_serializer": "v2.doc"
	}, {
		"id": 7122222,
		"slug": "ny150b",
		"title": "Javascript 工作原理",
		"description": "Javascript 定义单线程异步 IO并发基于原型的面线对象脚本语言Javascript 引擎与运行时环境Javascript 引擎和运行时环境这两个概念很容易被弄混，但它俩真不是一个东西。Javascript 引擎做的事情是实现 ECMAScript 标准，解释（或编译） Javascr...",
		"user_id": 231502,
		"book_id": 1053012,
		"format": "lake",
		"public": 1,
		"status": 0,
		"view_status": 0,
		"read_status": 1,
		"likes_count": 1,
		"read_count": 0,
		"comments_count": 0,
		"content_updated_at": "2021-06-02T05:05:17.000Z",
		"created_at": "2020-05-16T20:03:17.000Z",
		"updated_at": "2022-03-17T17:31:34.000Z",
		"published_at": "2021-05-30T05:33:38.000Z",
		"first_published_at": "2020-05-16T20:03:17.000Z",
		"draft_version": 5,
		"last_editor_id": 231502,
		"word_count": 1823,
		"cover": "https://cdn.nlark.com/yuque/0/2021/png/231502/1622352798786-e1536a4b-a82f-4e0f-a5e8-2c136e2e774f.png",
		"custom_description": null,
		"last_editor": {
			"id": 231502,
			"type": "User",
			"login": "mark.ck",
			"name": "程科(金禅)",
			"description": "{\\n  \"github\": \"https://github.com/mark-ck\",\\n  \"beian\": \"粤ICP备 16116485 号\"\\n}",
			"avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/231502/1575430020486-avatar/64bbc238-6ee3-4ae8-aae5-81fad0f4b3f0.png",
			"followers_count": 0,
			"following_count": 4,
			"created_at": "2018-12-25T09:49:25.000Z",
			"updated_at": "2022-03-17T17:31:53.000Z",
			"_serializer": "v2.user"
		},
		"book": null,
		"_serializer": "v2.doc"
	}],
	"userInfo": {
    "id": 123,
    "type": "User",
    "space_id": 0,
    "account_id": 123,
    "login": "mark.ck",
    "name": "程科(金禅)",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2019/png/231502/1575430020486-avatar/64bbc238-6ee3-4ae8-aae5-81fad0f4b3f0.png",
    "books_count": 2,
    "public_books_count": 1,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": {
      "github": "https://github.com/mark-ck",
      "beian": "粤ICP备 xxx 号"
    },
    "created_at": "2018-12-25T09:49:25.000Z",
    "updated_at": "2020-05-16T20:03:17.000Z",
    "_serializer": "v2.user_detail"
  },
  "namespace": "mark.ck/igyg77",
  "baseUrl": "https://www.yuque.com/api/v2",
  "search": "/documents/search",
  "title": "Ablula 的博客",
  "prefix": "/documents",
  "onlyDoc": false,
  "noHeader": false,
  "showSearch": true,
  "showEditor": false,
  "view": "",
  "token": "<your yuque token>",
  "darkMode": true,
  "blackColor": "#313437",
  "headerHeight": 80,
  "logo": "https://i.ablula.tech/ablula.png",
  "menuStyle": {
    "fontSize": 14
  },
  "logoStyle": {
    "paddingLeft": 20
  },
  "menuDataSource": [
    {
      "label": "文档",
      "target": "_self",
      "url": "/doc"
    },
    {
      "label": "协议",
      "target": "_self",
      "url": "http://lowcode-engine.cn/lowcode"
    },
    {
      "label": "Github",
      "target": "_blank",
      "url": "https://github.com/alibaba/lowcode-engine"
    }
  ]
}